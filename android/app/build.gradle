def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def stagingKeystoreProperties = new Properties()
def stagingKeystorePropertiesFile = rootProject.file('stag-key.properties')
if (stagingKeystorePropertiesFile.exists()) {
    stagingKeystoreProperties.load(new FileInputStream(stagingKeystorePropertiesFile))
}

def productionKeystoreProperties = new Properties()
def productionKeystorePropertiesFile = rootProject.file('prod-key.properties')
if (productionKeystorePropertiesFile.exists()) {
    productionKeystoreProperties.load(new FileInputStream(productionKeystorePropertiesFile))
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.connectnwork.app"
        minSdkVersion 21
        compileSdkVersion 33
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        debug {
            keyAlias stagingKeystoreProperties['keyAlias']
            keyPassword stagingKeystoreProperties['keyPassword']
            storeFile stagingKeystoreProperties['storeFile'] ? file(stagingKeystoreProperties['storeFile']) : null
            storePassword stagingKeystoreProperties['storePassword']
        }

        release {
            keyAlias productionKeystoreProperties['keyAlias']
            keyPassword productionKeystoreProperties['keyPassword']
            storeFile productionKeystoreProperties['storeFile'] ? file(productionKeystoreProperties['storeFile']) : null
            storePassword productionKeystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }

        release {
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "default"
    productFlavors {
        production {
            dimension "default"
            resValue "string", "app_name", "Connect&WORK"
            resValue "string", "facebook_app_id", "1325235681553071"
            resValue "string", "fb_login_protocol_scheme", "fb1325235681553071"
            resValue "string", "facebook_client_token", "dceb620a8f112d1cde90af5a369abb2d"
            applicationIdSuffix ""
        }

        staging {
            dimension "default"
            resValue "string", "app_name", "STG Connect&Work"
            resValue "string", "facebook_app_id", "1334992550632851"
            resValue "string", "fb_login_protocol_scheme", "fb1334992550632851"
            resValue "string", "facebook_client_token", "ad58f9b105b1c552a48a14e5831f8088"
            applicationIdSuffix ".stg"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation platform('com.google.firebase:firebase-bom:31.0.2')
    implementation 'com.google.firebase:firebase-analytics'
}
